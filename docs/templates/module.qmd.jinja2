{%- macro is_public(doc) -%}
    {%- if doc.name == "__init__" and (doc.docstring or (doc.kind == "function" and doc.signature_without_self.parameters)) -%}
        true
    {%- elif doc.name == "__doc__" -%}
    {%- elif doc.kind == "module" and doc.fullname not in all_modules -%}
    {%- elif (doc.qualname or doc.name) is in(validmind.members.__all__.value.elements if validmind.members.__all__ and validmind.members.__all__.value.elements else []) -%}
        true
    {%- elif not doc.name.startswith("_") and (doc.kind != "variable" or doc.is_enum_member or doc.docstring) -%}
        true
    {%- endif -%}
{%- endmacro -%}

{%- macro format_return_type(returns) -%}
{%- if returns.cls == "ExprName" -%}
    {%- if returns.name in validmind.members.client.members and validmind.members.client.members[returns.name].kind == "alias" -%}
        {{ validmind.members.client.members[returns.name].target_path }}
    {%- else -%}
        {{ returns.name }}
    {%- endif -%}
{%- elif returns.cls == "ExprSubscript" and returns.left is defined -%}
    {{ returns.left.name }}[
    {%- if returns.slice.cls == "ExprTuple" -%}
        {{ returns.slice.elements|map(attribute="name")|join(", ") }}
    {%- else -%}
        {{ returns.slice.name }}
    {%- endif -%}
    ]
{%- else -%}
    {{ returns|string }}
{%- endif -%}
{%- endmacro %}

{%- macro resolve_alias_path(member) -%}
    {%- if member.kind == "alias" and member.target_path -%}
        {{ member.target_path }}
    {%- else -%}
        {{ "" }}
    {%- endif -%}
{%- endmacro -%}

{%- macro get_flattened_members(module, level=1) -%}
    {% if module.members -%}
        {% for member_name, member in module.members.items() -%}
            {% if member.kind == "module" and not member_name.startswith("_") and member_name not in ["preprocess", "preprocessing"] %}
{{ "#" * (level + 2) }} {{ member_name }}

{% if member.docstring %}
{{ member.docstring.value if member.docstring.value is defined else member.docstring }}
{% endif %}

{% if member.members %}
{{ get_flattened_members(member, level + 1) }}
{% endif %}

            {% elif member.kind == "class" and not member_name.startswith("_") %}
{{ "#" * (level + 3) }} class {{ member_name }}{% if member.bases %}({{ member.bases[0].name }}){% endif %}

{{ member.docstring.value if member.docstring and member.docstring.value else member.docstring }}

                {% if member.members %}
                    {% for method_name, method in member.members.items() -%}
                        {% if not method_name.startswith("_") %}

{{ "#" * (level + 4) }} {{ method_name }}()
```python
def {{ method_name }}({% for param in method.parameters %}{{ param.name }}{% if param.default is not none %} = {{ param.default }}{% endif -%}{% if not loop.last %}, {% endif -%}{% endfor %}):
```
{% if member.docstring %}
{{ format_docstring_content(member.docstring.value if member.docstring.value is defined else member.docstring) }}
{% endif %}

                        {%- endif -%}
                    {% endfor %}
                {%- endif -%}
            {% elif member.kind == "function" and not member_name.startswith("_") 
                  and not member_name.startswith("simple_preprocess") %}

{{ "#" * (level + 4) }} {{ member_name }}()

```python
def {{ member_name }}({% for param in member.parameters %}{{ param.name }}{% if param.annotation %}: {{ param.annotation.name if param.annotation.cls == "ExprName" else param.annotation.left.name if param.annotation.cls == "ExprSubscript" else "" }}{% endif -%}{% if param.default is not none %} = {{ param.default }}{% endif -%}{% if not loop.last %}, {% endif -%}{% endfor %}){% if member.returns %} -> {{ format_return_type(member.returns) }}{% endif %}
```

{% if member.docstring %}
{{ format_docstring_content(member.docstring.value if member.docstring.value is defined else member.docstring) }}
{% endif %}

            {% endif -%}
        {% endfor %}
    {% endif -%}
{% endmacro -%}

{%- macro show_submodules(module) -%}
    {%- if module.members -%}
#### Module Hierarchy

        {%- for submember_name, submember in module.members.items() -%}
            {%- if submember.kind == "module" and not submember_name.startswith("_") -%}

##### {{ submember_name }}

* [{{ submember_name }}]({{ submember_name }}.qmd)
{% if submember.docstring %}
{{ submember.docstring.value if submember.docstring.value is defined else submember.docstring }}

{% endif -%}
                {%- if submember.members -%}
                    {%- for subsubmember_name, subsubmember in submember.members.items() -%}
                        {%- if subsubmember.kind == "module" and not subsubmember_name.startswith("_") -%}

###### {{ subsubmember_name }}

* [{{ subsubmember_name }}]({{ submember_name }}/{{ subsubmember_name }}.qmd)
{% if subsubmember.docstring %}
{{ subsubmember.docstring.value if subsubmember.docstring.value is defined else subsubmember.docstring }}

{% endif -%}
                        {%- endif -%}
                    {%- endfor -%}
                {%- endif -%}
            {%- endif -%}
        {%- endfor -%}
    {%- endif -%}
{%- endmacro -%}

{%- macro resolve_decorator(member, validmind) -%}
    {%- if member.kind == "alias" and member.target_path -%}
        {%- set path_parts = member.target_path.split(".") -%}
        {%- set current_module = validmind -%}
        
        {%- if "tests" in current_module.members -%}
            {%- set current_module = current_module.members["tests"] -%}
            {%- if "decorator" in current_module.members -%}
                {%- set current_module = current_module.members["decorator"] -%}
                {%- set target_name = path_parts[-1] -%}
                {%- if target_name in current_module.members -%}
                    {%- set target = current_module.members[target_name] -%}
```python
def {{ target_name }}({% if target.parameters -%}
    {%- for param in target.parameters -%}
        {{ param.name }}{% if param.kind == "variadic positional" %}*{% endif -%}{% if param.kind == "variadic keyword" %}**{% endif -%}{% if param.default is not none %} = {{ param.default }}{% endif -%}{% if not loop.last %}, {% endif -%}
    {%- endfor -%}
{%- endif -%}):
```

{% if target.docstring %}
{{ format_docstring_content(target.docstring.value if target.docstring.value is defined else target.docstring) }}
{%- endif -%}
                {%- endif -%}
            {%- endif -%}
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

{%- macro format_docstring_content(docstring) -%}
    {%- set docstring = docstring.replace(':\n-', ':\n\n-') -%}
    {%- set docstring = docstring.replace('\n        ', ' ') -%}
    {%- set docstring = docstring.replace(':param ', '\n**Parameters**\n\n- **') -%}
    {%- set docstring = docstring.replace(': ', '**: ', 1) -%}
    {%- set docstring = docstring.replace(':return: ', '\n**Returns**\n\n- ') -%}
    {%- set lines = docstring.split('\n') -%}
    {%- set formatted_lines = [] -%}
    {%- for line in lines -%}
        {%- if line.startswith('### ') -%}
            {%- set line = line.replace('### ', '###### ') -%}
        {%- elif line.strip() == 'Args:' -%}
            {%- set line = '**Arguments**\n' -%}
        {%- elif line.strip() == 'Attributes:' -%}
            {%- set line = '**Attributes**\n' -%}
        {%- elif line.strip() == 'Raises:' -%}
            {%- set line = '**Raises**\n' -%}
        {%- elif line.strip() == 'Returns:' -%}
            {%- set line = '**Returns**\n' -%}
        {%- elif line.startswith('    ') -%}
            {%- set trimmed = line.strip() -%}
            {%- if ':' in trimmed -%}
                {%- set parts = trimmed.split(':', 1) -%}
                {%- set param = parts[0].strip() -%}
                {%- set desc = parts[1].strip() -%}
                {%- if '[DEPRECATED]' in desc -%}
                    {%- set desc = desc.replace('[DEPRECATED]', '') ~ '^[**Deprecation notice**<br>`' ~ param ~ '` has been deprecated and will be removed in a future release.]' -%}
                {%- endif -%}
                {%- set line = '- **' ~ param ~ '**: ' ~ desc -%}
            {%- else -%}
                {%- set line = '- ' ~ trimmed -%}
            {%- endif -%}
        {%- endif -%}
        {%- if line.strip() or line.startswith('    ') -%}
            {%- set _ = formatted_lines.append(line) -%}
        {%- else -%}
            {%- set _ = formatted_lines.append('') -%}
        {%- endif -%}
    {%- endfor -%}
    {{ formatted_lines | join('\n') }}
{%- endmacro -%}

---
title: {{ "ValidMind Library" if validmind.name == "validmind" else validmind.name | capitalize }}
toc-depth: 4
toc-expand: 4
toc-location: left
toc-title: ""
---
{% if validmind.name != "validmind" %}
    {% set parentmodule = validmind.filepath.split("/")[-2] if validmind.filepath is defined and "/" in validmind.filepath else None %}
    {% if parentmodule and parentmodule in all_modules %}
        [‚Üê {{ parentmodule }}](../{{ parentmodule }}.qmd)
    {% endif -%}
{% endif -%}

{% if validmind.docstring %}
{{ validmind.docstring.value if validmind.docstring.value is defined else validmind.docstring }}
{%- endif -%}
{% if validmind.members %}

## Python Library API
{% for member_name, member in validmind.members.items() -%}
    {% if member_name == "__version__" 
        or (member.kind != "module" and "'" + member_name + "'" in validmind.members.__all__.value.elements)
        or (member.kind == "alias" 
            and member.target_path 
            and member.target_path.startswith("validmind.")
            and not member.name.startswith("_")
            and ("'" + member.target_path.split(".")[-2] + "'" in validmind.members.__all__.value.elements)) %}
{% set display_name = "\_\_version\_\_" if member_name == "__version__" else member_name + "()" %}
### {{ display_name }}
{%- set resolved = member -%}
{% if member.kind == "alias" -%}
    {% if member_name in ['tags', 'tasks', 'test'] -%}
        {% set resolved = None -%}
        {% set decorator_output = resolve_decorator(member, validmind) -%}
    {% else -%}
        {% set target_path = resolve_alias_path(member) -%}
        {% if target_path -%}
            {% set path_parts = target_path.split(".") -%}
            {% set module_name = path_parts[-2] -%}
            {% if module_name in validmind.members -%}
                {% set module = validmind.members[module_name] -%}
                {% set target_name = path_parts[-1] -%}
                {% if target_name in module.members -%}
                    {% set resolved = module.members[target_name] -%}
                    {%- if resolved.kind == "alias" and resolved.target_path %}
                        {% set inner_module_name = resolved.target_path.split(".")[-2] -%}
                        {% set inner_target_name = resolved.target_path.split(".")[-1] -%}
                        {% if inner_module_name in validmind.members -%}
                            {% set inner_module = validmind.members[inner_module_name] -%}
                            {% if inner_target_name in inner_module.members -%}
                                {% set resolved = inner_module.members[inner_target_name] -%}
                            {%- endif %}
                        {%- endif %}
                    {%- endif %}
                {%- endif %}
            {%- endif %}
        {%- endif %}
    {%- endif %}
{%- endif %}

{% if member_name in ['tags', 'tasks', 'test'] and decorator_output is defined -%}
{{ decorator_output }}
{% elif resolved and resolved.kind == "function" -%}
{%- if resolved.labels and "async" in resolved.labels %}async {% endif -%}
```python
def {{ member_name }}{% if resolved.parameters %}(
{%- for param in resolved.parameters %}
    {{ param.name }}{% if param.annotation %}: {{ param.annotation.name if param.annotation.cls == "ExprName" else param.annotation.left.name if param.annotation.cls == "ExprSubscript" else "" }}{% endif -%}{% if param.default is not none %} = {{ param.default }}{% endif -%}{% if not loop.last %}, {% endif -%}
{%- endfor %}
){% else %}(){% endif -%}
{%- if resolved.returns %} -> {{ format_return_type(resolved.returns) }}:{% endif %}
```
{% if resolved.docstring %}
{{ format_docstring_content(resolved.docstring.value if resolved.docstring.value is defined else resolved.docstring) }}
{%- endif -%}

{% if resolved.decorators %}
#### Decorators:

{% for decorator in resolved.decorators %}
- {{ decorator.value.values[0].name if decorator.value.cls == "ExprAttribute" else decorator.value }}
{% endfor %}
{% endif -%}

{% elif member_name == "__version__" -%}
{% set version_value = member.members.__version__.value if member.members and member.members.__version__ -%}
```python
{{ version_value | replace("'", "") }}
```
{% elif resolved.kind == "class" %}
{% if resolved.docstring %}
{{ format_docstring_content(resolved.docstring.value if resolved.docstring.value is defined else resolved.docstring) }}
{% endif -%}

{% if resolved.bases %}
**Bases**: {% for base in resolved.bases %}{{ base[2] }}{% if not loop.last %}, {% endif -%}{% endfor %}
{% endif -%}

{% if resolved.decorators %}
**Decorators**:
{% for decorator in resolved.decorators %}
- {{ decorator.value.name if decorator.value.cls == "ExprName" else decorator.value.values[0].name if decorator.value.cls == "ExprAttribute" else decorator.value }}
{% endfor %}
{% endif -%}

{% else %}
{% if resolved.target_path %}**Import Path**: `{{ resolved.target_path }}`{% endif -%}

{% if resolved.docstring %}
{{ format_docstring_content(resolved.docstring.value if resolved.docstring.value is defined else resolved.docstring) }}
{% endif -%}
{% endif -%}

    {% endif -%}
{% endfor %}

## Submodules
{% for member_name, member in validmind.members.items() %}
    {% if member.kind == "module" and "'" + member_name + "'" in validmind.members.__all__.value.elements %}
{% set display_name = "\_\_version\_\_" if member_name == "__version__" else member_name -%}
### {{ display_name }}

{% if member.target_path %}**Import Path**: `{{ member.target_path }}`{% endif -%}

{% if member.docstring %}
{{ member.docstring.value if member.docstring.value is defined else member.docstring }}
{% endif -%}

{{ get_flattened_members(member) }}
    {% endif -%}
{% endfor %}

{{ show_submodules(validmind) }}
{% endif -%}