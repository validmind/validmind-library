{% import "macros/docstring.jinja2" as doc %}
{% import "macros/types.jinja2" as types %}
{% import "macros/navigation.jinja2" as nav %}
---
title: "{% if module.name == "validmind" %}ValidMind Library{% else %}[validmind](/reference/validmind.html).{{ module.name }}{% endif +%}"
{% if module.name == "validmind" %}
aliases:
  - index.html
{% endif %}
sidebar: validmind-reference
---

{% if module.docstring %}
{{ doc.format_docstring(module.docstring) }}
{% endif %}

{% if module.members and module.name == "validmind" %}
## Python API

{% if module.members.__version__ %}
### &#95;&#95;version__

<!-- module.qmd.jinja2 - version number -->
```python
{{ module.members.__version__.value | replace("'", "") if module.members.__version__.value else module.members.__version__.members.__version__.value | replace("'", "") }}
```
{% endif %}

{# Process root-level aliases #}
{% for member in module.members | sort_members %}
{% if is_public(member, module, full_data, is_root) and member.kind == "alias" %}
{% set target = resolve_alias(member, full_data) %}
{% if target and target.docstring %}
### {{ member.name }}<span class='muted'>()</span>

{% if target.kind == "function" %}
<!-- module.qmd.jinja2 - root level function alias -->
```python
{% if target.labels and "async" in target.labels %}async {% endif %}
def {{ member.name }}(
{% for param in target.parameters %}
    {{ '**' if param.kind == 'variadic keyword' else '*' if param.kind == 'variadic positional' else '' }}{{ param.name }}{% if param.annotation %}: {{ param.annotation.name if param.annotation.cls == "ExprName" else param.annotation.left.name if param.annotation.cls == "ExprSubscript" else "" }}{% endif %}{% if param.default is not none %} = {{ param.default }}{% endif %}{% if not loop.last %},
{% endif %}
{%- endfor %}
){% if target.returns %} -> {{ types.format_module_return_type(target.returns, module, full_data) }}{% endif %}:
```
{% endif %}

{{ doc.format_docstring(target.docstring) }}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}

{% if module.members %}
{# List modules #}
{% set has_modules = namespace(value=false) %}
{% for member in module.members | sort_members %}
{% if is_public(member, module, full_data, is_root) and member.kind == "module" %}
{% set has_modules.value = true %}
{% endif %}
{% endfor %}

{% if not is_root %}
{% for member in module.members | sort_members %}
{% if is_public(member, module, full_data, is_root) and member.kind == "module" %}
- [{{ member.name }}]({{ module.name }}/{{ member.name }}.qmd)
{% endif %}
{% endfor %}
{% endif %}

{# Process module-level aliases #}
{% if not is_root %}
{% for member in module.members | sort_members %}
{% if is_public(member, module, full_data, is_root) and member.kind == "alias" %}
{% set resolved = resolve_alias(member, full_data) %}
{% if resolved.kind == "function" %}
## {{ member.name }}<span class='muted'>()</span>

<!-- module.qmd.jinja2 - module level function alias -->
```python
{% if resolved.labels and "async" in resolved.labels %}async {% endif %}def {{ member.name }}(
{% for param in resolved.parameters %}
    {{ param.name }}{% if param.annotation %}: {{ param.annotation }}{% endif %}{% if param.default %} = {{ param.default }}{% endif %}{% if not loop.last %},{% endif %}
{% endfor %}
){% if resolved.returns %} -> {{ resolved.returns }}{% endif %}:
```

{% if resolved.docstring %}
{{ doc.format_docstring(resolved.docstring) }}
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}

{# List classes and functions #}
{% for member in module.members | sort_members %}
{% if is_public(member, module, full_data, is_root) %}
{% set resolved = resolve_alias(member, full_data) %}
{% if resolved.kind == "class" %}

{% include "class.qmd.jinja2" %}
{% elif resolved.kind == "function" and member.kind != "alias" %}
{% include "function.qmd.jinja2" %}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}

{% if module.name == "validmind" %}

{% for member in module.members | sort_members %}
{% if is_public(member, module, full_data, is_root) %}
{% set resolved = resolve_alias(member, full_data) %}
{% if member.kind == "class" or (member.kind == "alias" and member.target_path and member.target_path.split(".")[-1][0].isupper()) %}
{% set target = resolve_alias(resolved, full_data) %}

### <span class='muted'>class</span> {{ member.name }}

<!-- module.qmd.jinja2 - class definition -->
```python
class {{ member.name }}():
```

{% if target.docstring %}
{{ doc.format_docstring(target.docstring) }}
{% endif %}

{% if target.members %}
{% for method_name, method in target.members.items() %}
{% if method.kind == "function" and (not method_name.startswith('_') or method_name in ['__init__']) %}

#### {{ member.name if method_name == '__init__' else method_name }}<span class='muted'>()</span>

<!-- module.qmd.jinja2 - class method definition -->
```python
def {{ method_name }}(
{%- for param in method.parameters %}
    {{ param.name }}{% if param.annotation %}: {{ param.annotation.name if param.annotation.cls == "ExprName" else param.annotation }}{% endif %}{% if param.default is not none %} = {{ param.default }}{% endif %}{% if not loop.last %},
{% endif %}
{%- endfor %}
):{% if method.returns %} -> {{ method.returns }}{% endif +%}
```

{% if method.docstring %}
{{ doc.format_docstring(method.docstring) }}
{% endif %}

{% endif %}
{% endfor %}
{% endif %}

{% endif %}
{% endif %}
{% endfor %}
{% endif %}
