{% import "macros/docstring.jinja2" as doc %}
{% import "macros/types.jinja2" as types %}
{% import "macros/signatures.jinja2" as signatures %}
---
title: "[validmind](/validmind/validmind.html).errors"
sidebar: validmind-reference
toc-depth: 4
toc-expand: 4
# errors.qmd.jinja2
---

{% if module.docstring %}
{{ doc.format_docstring(module.docstring) }}
{% endif %}

{# Create a macro for rendering error classes to avoid duplication #}
{% macro render_error_class(member) %}
### [class]{.muted} {{ member.name }}

{{ signatures.render_signature(member) }}

{% if member.docstring %}
{{ doc.format_docstring(member.docstring) }}
{% endif %}

<!-- Add inherited members section -->
{% if member.bases %}
**Inherited members**

{% set base_members = get_inherited_members(member, full_data) %}
{% if base_members %}
{% set grouped = {} %}
{% for base_member in base_members %}
    {% if base_member.base not in grouped %}
        {% set _ = grouped.update({base_member.base: []}) %}
    {% endif %}
    {% set _ = grouped[base_member.base].append(base_member) %}
{% endfor %}
{% for base, base_members in grouped.items() %}
- **From {{ base }}**: {% for base_member in base_members %}{% if base_member.kind == 'builtin' %}{{ base_member.name }}{% else %}[{% if base_member.kind == 'class' %}class {% endif %}{{ base_member.name }}[()]{.muted}](#{% if base_member.kind == 'class' %}class-{% endif %}{{ base_member.name | lower }}){% endif %}{% if not loop.last %}, {% endif %}{% endfor %}
{% endfor %}
{% endif %}
{% endif %}

{% if member.members %}
{% for method in member.members.values() | sort(attribute='name') %}
{% if method.kind == 'method' and not method.name.startswith('_') %}
#### [{{ method.name }}[()]{.muted}](#{{ method.name }})

{{ signatures.render_signature(method) }}

{% if method.docstring %}
{{ doc.format_docstring(method.docstring) }}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endmacro %}

## Base Errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and member.name in ['BaseError', 'APIRequestError'] %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %}

## API Errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and (member.name.startswith('API') or member.name.endswith('APIError')) and member.name != 'APIRequestError' %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %}

## Model Errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and 'Model' in member.name %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %}

## Test Errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and 'Test' in member.name %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %}

## Input Validation Errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and (member.name.startswith('Invalid') or member.name.startswith('Missing')) %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %}

## Unsupported Feature Errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and member.name.startswith('Unsupported') %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %} 