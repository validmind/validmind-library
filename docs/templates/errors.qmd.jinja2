{% import "macros/docstring.jinja2" as doc %}
{% import "macros/types.jinja2" as types %}
{% import "macros/signatures.jinja2" as signatures %}
---
title: "[validmind](/validmind/validmind.html).errors"
sidebar: validmind-reference
# errors.qmd.jinja2
---

{% if module.docstring %}
{{ doc.format_docstring(module.docstring) }}
{% endif %}

{# Create a macro for rendering error classes to avoid duplication #}
{% macro render_error_class(member) %}
### [class]{.muted} {{ member.name }}

{{ signatures.render_signature(member) }}

{% if member.docstring %}
{{ doc.format_docstring(member.docstring) }}
{% endif %}

<!-- errors.qmd.jinja2 - inherited members -->
{% if member.bases %}
**Inherited members**

{% set base_members = get_inherited_members(member, full_data) %}
{% if base_members %}
{% set grouped = {} %}
{% set has_description_method = false %}
{% for base_member in base_members %}
    {% if base_member.base not in grouped and base_member.base != member.name %}
        {% set _ = grouped.update({base_member.base: []}) %}
    {% endif %}
    {% if base_member.base != member.name %}
        {% set _ = grouped[base_member.base].append(base_member) %}
        {% if base_member.kind == 'method' and base_member.name == 'description' %}
            {% set has_description_method = true %}
        {% endif %}
    {% endif %}
{% endfor %}
{% for base, base_members in grouped.items() %}
- **From {{ base }}**: {% for base_member in base_members %}{% if base_member.kind == 'builtin' %}{{ base_member.name }}{% else %}[{% if base_member.kind == 'class' %}class {% endif %}{{ base_member.name }}[()]{.muted}](#{% if base_member.kind == 'class' %}class-{% endif %}{{ base_member.name | lower }}){% endif %}{% if not loop.last %}, {% endif %}{% endfor %}{% if not loop.last %}

{% endif %}
{% endfor %}
{% endif %}
{% endif %}

{% if member.members %}
{% for method in member.members.values() | sort(attribute='name') %}
{% if method.kind == 'method' and (not method.name.startswith('_') or method.name == '__init__') and method.name != '__str__' and method.name != 'description' %}
### [{{ member.name if method.name == '__init__' else method.name }}[()]{.muted}](#{{ method.name }})

{% if method.name == '__init__' %}
{% set method_with_parent = method.copy() %}
{% set _ = method_with_parent.update({'parent': {'name': member.name}}) %}
{{ signatures.render_signature(method_with_parent) }}
{% else %}
{{ signatures.render_signature(method) }}
{% endif %}

{% if method.docstring %}
{{ doc.format_docstring(method.docstring) }}
{% endif %}
{% endif %}
{% endfor %}

{# Add the description method separately to ensure it's properly included #}
{% set has_direct_description = false %}
{% for method in member.members.values() %}
{% if method.kind == 'method' and method.name == 'description' %}
{% set has_direct_description = true %}
### [{{ method.name }}[()]{.muted}](#{{ method.name }})

{{ signatures.render_signature(method) }}

{% if method.docstring %}
{{ doc.format_docstring(method.docstring) }}
{% endif %}
{% endif %}
{% endfor %}

{# Show inherited description method if class doesn't have its own #}
{% if not has_direct_description and base_members is defined and has_description_method %}
{% set displayed_description = false %}
{% for base_member in base_members %}
{% if not displayed_description and base_member.kind == 'method' and base_member.name == 'description' and base_member.base != member.name %}
### [description[()]{.muted}](#description) [inherited from {{ base_member.base }}]

{% set base_method = base_member.copy() %}
{{ signatures.render_signature(base_method) }}

{% if base_member.docstring %}
{{ doc.format_docstring(base_member.docstring) }}
{% endif %}
{% set displayed_description = true %}
{% endif %}
{% endfor %}
{% endif %}
{% endif %}
{% endmacro %}

## Base errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and member.name in ['BaseError', 'APIRequestError'] %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %}

## API errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and ('API' in member.name) and member.name != 'APIRequestError' %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %}

## Model errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and ('Model' in member.name or member.name in ['UnsupportedModelError', 'UnsupportedModelForSHAPError', 'UnsupportedRModelError']) %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %}

## Test errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and ('Test' in member.name or member.name in ['GetTestSuiteError', 'InitializeTestSuiteError', 'InvalidTestParametersError', 'InvalidTestResultsError', 'LoadTestError', 'MissingRequiredTestInputError', 'SkipTestError']) %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %}

## Input validation errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and (member.name.startswith('Invalid') or member.name.startswith('Missing')) %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %}

## Unsupported feature errors

{% for member in members | sort_members(is_errors_module=true) %}
{% if member.kind == 'class' and member.name.startswith('Unsupported') %}
{{ render_error_class(member) }}
{% endif %}
{% endfor %} 