---
title: "[validmind](/reference/validmind.html).vm_models"
sidebar: validmind-reference
toc-depth: 4
toc-expand: 4
---

Models entrypoint

## [class]{.muted} Figure

<!-- class.qmd.jinja2 - class definition -->

```python
class Figure():
```

Figure objects track the schema supported by the ValidMind API

### [serialize[()]{.muted}](#serialize)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">serialize</span>(<span class="param"><span class="n">self</span></span>):</span>
</span>

:::

Serializes the Figure to a dictionary so it can be sent to the API

### [serialize_files[()]{.muted}](#serialize_files)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">serialize_files</span>(<span class="param"><span class="n">self</span></span>):</span>
</span>

:::

Creates a `requests`-compatible files object to be sent to the API

### [to_widget[()]{.muted}](#to_widget)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">to_widget</span>(<span class="param"><span class="n">self</span></span>):</span>
</span>

:::

Returns the ipywidget compatible representation of the figure. Ideally we would render images as-is, but Plotly FigureWidgets don't work well on Google Colab when they are combined with ipywidgets.

## [class]{.muted} ModelAttributes

<!-- class.qmd.jinja2 - class definition -->

```python
class ModelAttributes():
```

Model attributes definition

### [from_dict[()]{.muted}](#from_dict)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">from_dict</span>(
    <span class="param"><span class="n">cls</span></span>,    <span class="param"><span class="n">data</span></span>):</span>
</span>

:::

Creates a ModelAttributes instance from a dictionary

## [class]{.muted} TestSuite

<!-- class.qmd.jinja2 - class definition -->

```python
class TestSuite():
```

Base class for test suites. Test suites are used to define a grouping of tests that can be run as a suite against datasets and models. Test Suites can be defined by inheriting from this base class and defining the list of tests as a class variable.

Tests can be a flat list of strings or may be nested into sections by using a dict

### [get_default_config[()]{.muted}](#get_default_config)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">get_default_config</span>(<span class="param"><span class="n">self</span></span>) <span class="p">-></span> <span class="return-annotation">dict</span>:</span>
</span>

:::

Returns the default configuration for the test suite Each test in a test suite can accept parameters and those parameters can have default values. Both the parameters and their defaults are set in the test class and a config object can be passed to the test suite's run method to override the defaults. This function returns a dictionary containing the parameters and their default values for every test to allow users to view and set values

**Returns**

- A dictionary of test names and their default parameters

### [get_tests[()]{.muted}](#get_tests)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">get_tests</span>(<span class="param"><span class="n">self</span></span>) <span class="p">-></span> <span class="return-annotation">{'cls': 'ExprSubscript', 'left': {'cls': 'ExprName', 'name': 'List'}, 'slice': {'cls': 'ExprName', 'name': 'str'}}</span>:</span>
</span>

:::

Get all test suite test objects from all sections

### [num_tests[()]{.muted}](#num_tests)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">num_tests</span>(<span class="param"><span class="n">self</span></span>) <span class="p">-></span> <span class="return-annotation">int</span>:</span>
</span>

:::

Returns the total number of tests in the test suite

## [class]{.muted} TestSuiteRunner

<!-- class.qmd.jinja2 - class definition -->

```python
class TestSuiteRunner():
```

Runs a test suite

### [log_results[()]{.muted}](#log_results)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">log_results</span>(<span class="param"><span class="n">self</span></span>):</span>
</span>

:::

Logs the results of the test suite to ValidMind This method will be called after the test suite has been run and all results have been collected. This method will log the results to ValidMind.

### [run[()]{.muted}](#run)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">run</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">send</span><span class="p">:</span> <span class="n">bool</span> <span class="o">=</span> <span class="kc">True</span></span>,    <span class="param"><span class="n">fail_fast</span><span class="p">:</span> <span class="n">bool</span> <span class="o">=</span> <span class="kc">False</span></span>):</span>
</span>

:::

Runs the test suite, renders the summary and sends the results to ValidMind

**Parameters**

- **send** bool: Whether to send the results to ValidMind. Defaults to True.
- **fail_fast** bool: Whether to stop running tests after the first failure. Defaults to False.

### [summarize[()]{.muted}](#summarize)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">summarize</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">show_link</span><span class="p">:</span> <span class="n">bool</span> <span class="o">=</span> <span class="kc">True</span></span>):</span>
</span>

:::

## [class]{.muted} VMDataset

<!-- class.qmd.jinja2 - class definition -->

```python
class VMDataset(VMInput):
```

Base class for VM datasets Child classes should be used to support new dataset types (tensor, polars etc) by converting the user's dataset into a numpy array collecting metadata like column names and then call this (parent) class `__init__` method.

This way we can support multiple dataset types but under the hood we only need to work with numpy arrays and pandas dataframes in this class.

**Parameters**

- **raw_dataset** np.ndarray: The raw dataset as a NumPy array.
- **input_id** str: Identifier for the dataset.
- **index** np.ndarray: The raw dataset index as a NumPy array.
- **columns** Set\[str\]: The column names of the dataset.
- **target_column** str: The target column name of the dataset.
- **feature_columns** List\[str\]: The feature column names of the dataset.
- **feature_columns_numeric** List\[str\]: The numeric feature column names of the dataset.
- **feature_columns_categorical** List\[str\]: The categorical feature column names of the dataset.
- **text_column** str: The text column name of the dataset for NLP tasks.
- **target_class_labels** Dict: The class labels for the target columns.
- **df** pd.DataFrame: The dataset as a pandas DataFrame.
- **extra_columns** Dict: Extra columns to include in the dataset.

**Inherited members**

### [add_extra_column[()]{.muted}](#add_extra_column)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">add_extra_column</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">column_name</span></span>,    <span class="param"><span class="n">column_values</span> <span class="o">=</span> <span class="kc">None</span></span>):</span>
</span>

:::

Adds an extra column to the dataset without modifying the dataset `features` and `target` columns.

**Parameters**

- **column_name** str: The name of the extra column.
- **column_values** np.ndarray: The values of the extra column.

### [assign_predictions[()]{.muted}](#assign_predictions)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">assign_predictions</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">model</span><span class="p">:</span> <span class="n">VMModel</span></span>,    <span class="param"><span class="n">prediction_column</span><span class="p">:</span> <span class="n">str</span> <span class="o">=</span> <span class="kc">None</span></span>,    <span class="param"><span class="n">prediction_values</span><span class="p">:</span> <span class="n">list</span> <span class="o">=</span> <span class="kc">None</span></span>,    <span class="param"><span class="n">probability_column</span><span class="p">:</span> <span class="n">str</span> <span class="o">=</span> <span class="kc">None</span></span>,    <span class="param"><span class="n">probability_values</span><span class="p">:</span> <span class="n">list</span> <span class="o">=</span> <span class="kc">None</span></span>,    <span class="param"><span class="n">prediction_probabilities</span><span class="p">:</span> <span class="n">list</span> <span class="o">=</span> <span class="kc">None</span></span>,    <span class="param"><span class="n">kwargs</span> <span class="o">=</span> <span class="kc">{}</span></span>):</span>
</span>

:::

Assign predictions and probabilities to the dataset.

**Parameters**

- **model** VMModel: The model used to generate the predictions.
- **prediction_column** str: The name of the column containing the predictions. Defaults to None.
- **prediction_values** list: The values of the predictions. Defaults to None.
- **probability_column** str: The name of the column containing the probabilities. Defaults to None.
- **probability_values** list: The values of the probabilities. Defaults to None.
- **prediction_probabilities** list: DEPRECATED: The values of the probabilities. Defaults to None.
- **kwargs**: Additional keyword arguments that will get passed through to the model's `predict` method.

### [prediction_column[()]{.muted}](#prediction_column)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">prediction_column</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">model</span><span class="p">:</span> <span class="n">VMModel</span></span>,    <span class="param"><span class="n">column_name</span><span class="p">:</span> <span class="n">str</span> <span class="o">=</span> <span class="kc">None</span></span>) <span class="p">-></span> <span class="return-annotation">str</span>:</span>
</span>

:::

Get or set the prediction column for a model.

### [probability_column[()]{.muted}](#probability_column)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">probability_column</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">model</span><span class="p">:</span> <span class="n">VMModel</span></span>,    <span class="param"><span class="n">column_name</span><span class="p">:</span> <span class="n">str</span> <span class="o">=</span> <span class="kc">None</span></span>) <span class="p">-></span> <span class="return-annotation">str</span>:</span>
</span>

:::

Get or set the probability column for a model.

### [target_classes[()]{.muted}](#target_classes)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">target_classes</span>(<span class="param"><span class="n">self</span></span>):</span>
</span>

:::

Returns the target class labels or unique values of the target column.

### [with_options[()]{.muted}](#with_options)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">with_options</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">kwargs</span> <span class="o">=</span> <span class="kc">{}</span></span>) <span class="p">-></span> <span class="return-annotation">VMDataset</span>:</span>
</span>

:::

Support options provided when passing an input to run_test or run_test_suite

**Parameters**

- \*\***kwargs**: Options:
- columns: Filter columns in the dataset

**Returns**

- A new instance of the dataset with only the specified columns

### [x_df[()]{.muted}](#x_df)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">x_df</span>(<span class="param"><span class="n">self</span></span>):</span>
</span>

:::

Returns a dataframe containing only the feature columns

### [y_df[()]{.muted}](#y_df)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">y_df</span>(<span class="param"><span class="n">self</span></span>) <span class="p">-></span> <span class="return-annotation">{'cls': 'ExprAttribute', 'values': [{'cls': 'ExprName', 'name': 'pd'}, {'cls': 'ExprName', 'name': 'DataFrame'}]}</span>:</span>
</span>

:::

Returns a dataframe containing the target column

### [y_pred[()]{.muted}](#y_pred)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">y_pred</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">model</span></span>) <span class="p">-></span> <span class="return-annotation">{'cls': 'ExprAttribute', 'values': [{'cls': 'ExprName', 'name': 'np'}, {'cls': 'ExprName', 'name': 'ndarray'}]}</span>:</span>
</span>

:::

Returns the predictions for a given model. Attempts to stack complex prediction types (e.g., embeddings) into a single, multi-dimensional array.

**Parameters**

- **model** VMModel: The model whose predictions are sought.

**Returns**

- The predictions for the model

### [y_pred_df[()]{.muted}](#y_pred_df)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">y_pred_df</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">model</span></span>) <span class="p">-></span> <span class="return-annotation">{'cls': 'ExprAttribute', 'values': [{'cls': 'ExprName', 'name': 'pd'}, {'cls': 'ExprName', 'name': 'DataFrame'}]}</span>:</span>
</span>

:::

Returns a dataframe containing the predictions for a given model

### [y_prob[()]{.muted}](#y_prob)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">y_prob</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">model</span></span>) <span class="p">-></span> <span class="return-annotation">{'cls': 'ExprAttribute', 'values': [{'cls': 'ExprName', 'name': 'np'}, {'cls': 'ExprName', 'name': 'ndarray'}]}</span>:</span>
</span>

:::

Returns the probabilities for a given model.

**Parameters**

- **model** str: The ID of the model whose predictions are sought.

**Returns**

- The probability variables.

### [y_prob_df[()]{.muted}](#y_prob_df)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">y_prob_df</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">model</span></span>) <span class="p">-></span> <span class="return-annotation">{'cls': 'ExprAttribute', 'values': [{'cls': 'ExprName', 'name': 'pd'}, {'cls': 'ExprName', 'name': 'DataFrame'}]}</span>:</span>
</span>

:::

Returns a dataframe containing the probabilities for a given model

## [class]{.muted} VMInput

<!-- class.qmd.jinja2 - class definition -->

```python
class VMInput(ABC):
```

Base class for ValidMind Input types

**Inherited members**

### [with_options[()]{.muted}](#with_options)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">with_options</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">kwargs</span> <span class="o">=</span> <span class="kc">{}</span></span>) <span class="p">-></span> <span class="return-annotation">VMInput</span>:</span>
</span>

:::

Allows for setting options on the input object that are passed by the user when using the input to run a test or set of tests

To allow options, just override this method in the subclass (see VMDataset) and ensure that it returns a new instance of the input with the specified options set.

**Parameters**

- \*\***kwargs**: Arbitrary keyword arguments that will be passed to the input object

**Returns**

- A new instance of the input with the specified options set

## [class]{.muted} VMModel

<!-- class.qmd.jinja2 - class definition -->

```python
class VMModel(VMInput):
```

An base class that wraps a trained model instance and its associated data.

**Parameters**

- **model** object: The trained model instance. Defaults to None.
- **input_id** str: The input ID for the model. Defaults to None.
- **attributes** ModelAttributes: The attributes of the model. Defaults to None.
- **name** str: The name of the model. Defaults to the class name.

**Inherited members**

### [predict[()]{.muted}](#predict)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">predict</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">args</span> <span class="o">=</span> <span class="kc">()</span></span>,    <span class="param"><span class="n">kwargs</span> <span class="o">=</span> <span class="kc">{}</span></span>):</span>
</span>

:::

Predict method for the model. This is a wrapper around the model's

### [predict_proba[()]{.muted}](#predict_proba)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">predict_proba</span>(
    <span class="param"><span class="n">self</span></span>,    <span class="param"><span class="n">args</span> <span class="o">=</span> <span class="kc">()</span></span>,    <span class="param"><span class="n">kwargs</span> <span class="o">=</span> <span class="kc">{}</span></span>):</span>
</span>

:::

Predict probabilties - must be implemented by subclass if needed

### [serialize[()]{.muted}](#serialize)

<!-- function.qmd.jinja2 - function signature -->

::: {.signature}

<span class="signature">
<span class="kw">def</span> <span class="name">serialize</span>(<span class="param"><span class="n">self</span></span>):</span>
</span>

:::

Serializes the model to a dictionary so it can be sent to the API
