---
title: "[validmind](/validmind/validmind.html).errors"
sidebar: validmind-reference
# errors.qmd.jinja2
---

<!-- docstring.jinja2 -->

This module contains all the custom errors that are used in the ValidMind Library.

The following base errors are defined for others:

- BaseError
- APIRequestError

## Base errors

### [class]{.muted} BaseError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">BaseError</span>:

:::

<!-- Add inherited members section -->

**Inherited members**

- **From BaseError**: [class BaseError[()]{.muted}](#class-baseerror), [__init__[()]{.muted}](#__init__), [__str__[()]{.muted}](#__str__), [description[()]{.muted}](#description)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} APIRequestError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">APIRequestError</span>:

:::

<!-- docstring.jinja2 -->

Generic error for API request errors that are not known.

<!-- Add inherited members section -->

**Inherited members**

- **From APIRequestError**: [class APIRequestError[()]{.muted}](#class-apirequesterror)- **From builtins.BaseException**: with_traceback, add_note

## API errors

### [class]{.muted} InvalidAPICredentialsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidAPICredentialsError</span>:

:::

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidAPICredentialsError**: [class InvalidAPICredentialsError[()]{.muted}](#class-invalidapicredentialserror), [description[()]{.muted}](#description)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingAPICredentialsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingAPICredentialsError</span>:

:::

<!-- Add inherited members section -->

**Inherited members**

- **From MissingAPICredentialsError**: [class MissingAPICredentialsError[()]{.muted}](#class-missingapicredentialserror), [description[()]{.muted}](#description)- **From builtins.BaseException**: with_traceback, add_note

## Model errors

### [class]{.muted} InvalidXGBoostTrainedModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidXGBoostTrainedModelError</span>:

:::

<!-- docstring.jinja2 -->

When an invalid XGBoost trained model is used when calling init_r_model.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidXGBoostTrainedModelError**: [class InvalidXGBoostTrainedModelError[()]{.muted}](#class-invalidxgboosttrainedmodelerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingModelIdError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingModelIdError</span>:

:::

<!-- Add inherited members section -->

**Inherited members**

- **From MissingModelIdError**: [class MissingModelIdError[()]{.muted}](#class-missingmodeliderror), [description[()]{.muted}](#description)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingOrInvalidModelPredictFnError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingOrInvalidModelPredictFnError</span>:

:::

<!-- docstring.jinja2 -->

When the PyTorch model is missing a predict function or its predict method does not have the expected arguments.

<!-- Add inherited members section -->

**Inherited members**

- **From MissingOrInvalidModelPredictFnError**: [class MissingOrInvalidModelPredictFnError[()]{.muted}](#class-missingorinvalidmodelpredictfnerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} UnsupportedModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedModelError</span>:

:::

<!-- docstring.jinja2 -->

When an unsupported model is used.

<!-- Add inherited members section -->

**Inherited members**

- **From UnsupportedModelError**: [class UnsupportedModelError[()]{.muted}](#class-unsupportedmodelerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} UnsupportedModelForSHAPError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedModelForSHAPError</span>:

:::

<!-- docstring.jinja2 -->

When an unsupported model is used for SHAP importance.

<!-- Add inherited members section -->

**Inherited members**

- **From UnsupportedModelForSHAPError**: [class UnsupportedModelForSHAPError[()]{.muted}](#class-unsupportedmodelforshaperror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} UnsupportedRModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedRModelError</span>:

:::

<!-- docstring.jinja2 -->

When an unsupported R model is used.

<!-- Add inherited members section -->

**Inherited members**

- **From UnsupportedRModelError**: [class UnsupportedRModelError[()]{.muted}](#class-unsupportedrmodelerror)- **From builtins.BaseException**: with_traceback, add_note

## Test errors

### [class]{.muted} GetTestSuiteError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">GetTestSuiteError</span>:

:::

<!-- docstring.jinja2 -->

When the test suite could not be found.

<!-- Add inherited members section -->

**Inherited members**

- **From GetTestSuiteError**: [class GetTestSuiteError[()]{.muted}](#class-gettestsuiteerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InitializeTestSuiteError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InitializeTestSuiteError</span>:

:::

<!-- docstring.jinja2 -->

When the test suite was found but could not be initialized.

<!-- Add inherited members section -->

**Inherited members**

- **From InitializeTestSuiteError**: [class InitializeTestSuiteError[()]{.muted}](#class-initializetestsuiteerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InvalidTestParametersError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidTestParametersError</span>:

:::

<!-- docstring.jinja2 -->

When invalid parameters are provided for the test.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidTestParametersError**: [class InvalidTestParametersError[()]{.muted}](#class-invalidtestparameterserror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InvalidTestResultsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidTestResultsError</span>:

:::

<!-- docstring.jinja2 -->

When an invalid test results object is sent to the API.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidTestResultsError**: [class InvalidTestResultsError[()]{.muted}](#class-invalidtestresultserror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} LoadTestError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">LoadTestError</span>:

:::

<!-- docstring.jinja2 -->

Exception raised when an error occurs while loading a test.

<!-- Add inherited members section -->

**Inherited members**

- **From LoadTestError**: [class LoadTestError[()]{.muted}](#class-loadtesterror), [__init__[()]{.muted}](#__init__)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingRequiredTestInputError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingRequiredTestInputError</span>:

:::

<!-- docstring.jinja2 -->

When a required test context variable is missing.

<!-- Add inherited members section -->

**Inherited members**

- **From MissingRequiredTestInputError**: [class MissingRequiredTestInputError[()]{.muted}](#class-missingrequiredtestinputerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} SkipTestError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">SkipTestError</span>:

:::

<!-- docstring.jinja2 -->

Useful error to throw when a test cannot be executed.

<!-- Add inherited members section -->

**Inherited members**

- **From SkipTestError**: [class SkipTestError[()]{.muted}](#class-skiptesterror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} TestInputInvalidDatasetError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">TestInputInvalidDatasetError</span>:

:::

<!-- docstring.jinja2 -->

When an invalid dataset is used in a test context.

<!-- Add inherited members section -->

**Inherited members**

- **From TestInputInvalidDatasetError**: [class TestInputInvalidDatasetError[()]{.muted}](#class-testinputinvaliddataseterror)- **From builtins.BaseException**: with_traceback, add_note

## Input validation errors

### [class]{.muted} InvalidXGBoostTrainedModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidXGBoostTrainedModelError</span>:

:::

<!-- docstring.jinja2 -->

When an invalid XGBoost trained model is used when calling init_r_model.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidXGBoostTrainedModelError**: [class InvalidXGBoostTrainedModelError[()]{.muted}](#class-invalidxgboosttrainedmodelerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingModelIdError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingModelIdError</span>:

:::

<!-- Add inherited members section -->

**Inherited members**

- **From MissingModelIdError**: [class MissingModelIdError[()]{.muted}](#class-missingmodeliderror), [description[()]{.muted}](#description)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingOrInvalidModelPredictFnError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingOrInvalidModelPredictFnError</span>:

:::

<!-- docstring.jinja2 -->

When the PyTorch model is missing a predict function or its predict method does not have the expected arguments.

<!-- Add inherited members section -->

**Inherited members**

- **From MissingOrInvalidModelPredictFnError**: [class MissingOrInvalidModelPredictFnError[()]{.muted}](#class-missingorinvalidmodelpredictfnerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InvalidTestParametersError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidTestParametersError</span>:

:::

<!-- docstring.jinja2 -->

When invalid parameters are provided for the test.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidTestParametersError**: [class InvalidTestParametersError[()]{.muted}](#class-invalidtestparameterserror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InvalidTestResultsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidTestResultsError</span>:

:::

<!-- docstring.jinja2 -->

When an invalid test results object is sent to the API.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidTestResultsError**: [class InvalidTestResultsError[()]{.muted}](#class-invalidtestresultserror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingRequiredTestInputError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingRequiredTestInputError</span>:

:::

<!-- docstring.jinja2 -->

When a required test context variable is missing.

<!-- Add inherited members section -->

**Inherited members**

- **From MissingRequiredTestInputError**: [class MissingRequiredTestInputError[()]{.muted}](#class-missingrequiredtestinputerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InvalidContentIdPrefixError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidContentIdPrefixError</span>:

:::

<!-- docstring.jinja2 -->

When an invalid text content_id is sent to the API.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidContentIdPrefixError**: [class InvalidContentIdPrefixError[()]{.muted}](#class-invalidcontentidprefixerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InvalidInputError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidInputError</span>:

:::

<!-- docstring.jinja2 -->

When an invalid input object is provided.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidInputError**: [class InvalidInputError[()]{.muted}](#class-invalidinputerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InvalidMetricResultsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidMetricResultsError</span>:

:::

<!-- docstring.jinja2 -->

When an invalid metric results object is sent to the API.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidMetricResultsError**: [class InvalidMetricResultsError[()]{.muted}](#class-invalidmetricresultserror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InvalidProjectError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidProjectError</span>:

:::

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidProjectError**: [class InvalidProjectError[()]{.muted}](#class-invalidprojecterror), [description[()]{.muted}](#description)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InvalidRequestBodyError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidRequestBodyError</span>:

:::

<!-- docstring.jinja2 -->

When a POST/PUT request is made with an invalid request body.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidRequestBodyError**: [class InvalidRequestBodyError[()]{.muted}](#class-invalidrequestbodyerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InvalidTextObjectError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidTextObjectError</span>:

:::

<!-- docstring.jinja2 -->

When an invalid Metadata (Text) object is sent to the API.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidTextObjectError**: [class InvalidTextObjectError[()]{.muted}](#class-invalidtextobjecterror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} InvalidValueFormatterError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">InvalidValueFormatterError</span>:

:::

<!-- docstring.jinja2 -->

When an invalid value formatter is provided when serializing results.

<!-- Add inherited members section -->

**Inherited members**

- **From InvalidValueFormatterError**: [class InvalidValueFormatterError[()]{.muted}](#class-invalidvalueformattererror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingCacheResultsArgumentsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingCacheResultsArgumentsError</span>:

:::

<!-- docstring.jinja2 -->

When the cache_results function is missing arguments.

<!-- Add inherited members section -->

**Inherited members**

- **From MissingCacheResultsArgumentsError**: [class MissingCacheResultsArgumentsError[()]{.muted}](#class-missingcacheresultsargumentserror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingClassLabelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingClassLabelError</span>:

:::

<!-- docstring.jinja2 -->

When the one or more class labels are missing from provided dataset targets.

<!-- Add inherited members section -->

**Inherited members**

- **From MissingClassLabelError**: [class MissingClassLabelError[()]{.muted}](#class-missingclasslabelerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingDependencyError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingDependencyError</span>:

:::

<!-- docstring.jinja2 -->

When a required dependency is missing.

<!-- Add inherited members section -->

**Inherited members**

- **From MissingDependencyError**: [class MissingDependencyError[()]{.muted}](#class-missingdependencyerror), [__init__[()]{.muted}](#__init__)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingDocumentationTemplate

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingDocumentationTemplate</span>:

:::

<!-- docstring.jinja2 -->

When the client config is missing the documentation template.

<!-- Add inherited members section -->

**Inherited members**

- **From MissingDocumentationTemplate**: [class MissingDocumentationTemplate[()]{.muted}](#class-missingdocumentationtemplate)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingRExtrasError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingRExtrasError</span>:

:::

<!-- docstring.jinja2 -->

When the R extras have not been installed.

<!-- Add inherited members section -->

**Inherited members**

- **From MissingRExtrasError**: [class MissingRExtrasError[()]{.muted}](#class-missingrextraserror), [description[()]{.muted}](#description)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingTextContentIdError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingTextContentIdError</span>:

:::

<!-- docstring.jinja2 -->

When a Text object is sent to the API without a content_id.

<!-- Add inherited members section -->

**Inherited members**

- **From MissingTextContentIdError**: [class MissingTextContentIdError[()]{.muted}](#class-missingtextcontentiderror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} MissingTextContentsError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">MissingTextContentsError</span>:

:::

<!-- docstring.jinja2 -->

When a Text object is sent to the API without a "text" attribute.

<!-- Add inherited members section -->

**Inherited members**

- **From MissingTextContentsError**: [class MissingTextContentsError[()]{.muted}](#class-missingtextcontentserror)- **From builtins.BaseException**: with_traceback, add_note

## Unsupported feature errors

### [class]{.muted} UnsupportedModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedModelError</span>:

:::

<!-- docstring.jinja2 -->

When an unsupported model is used.

<!-- Add inherited members section -->

**Inherited members**

- **From UnsupportedModelError**: [class UnsupportedModelError[()]{.muted}](#class-unsupportedmodelerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} UnsupportedModelForSHAPError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedModelForSHAPError</span>:

:::

<!-- docstring.jinja2 -->

When an unsupported model is used for SHAP importance.

<!-- Add inherited members section -->

**Inherited members**

- **From UnsupportedModelForSHAPError**: [class UnsupportedModelForSHAPError[()]{.muted}](#class-unsupportedmodelforshaperror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} UnsupportedRModelError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedRModelError</span>:

:::

<!-- docstring.jinja2 -->

When an unsupported R model is used.

<!-- Add inherited members section -->

**Inherited members**

- **From UnsupportedRModelError**: [class UnsupportedRModelError[()]{.muted}](#class-unsupportedrmodelerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} UnsupportedColumnTypeError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedColumnTypeError</span>:

:::

<!-- docstring.jinja2 -->

When an unsupported column type is found on a dataset.

<!-- Add inherited members section -->

**Inherited members**

- **From UnsupportedColumnTypeError**: [class UnsupportedColumnTypeError[()]{.muted}](#class-unsupportedcolumntypeerror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} UnsupportedDatasetError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedDatasetError</span>:

:::

<!-- docstring.jinja2 -->

When an unsupported dataset is used.

<!-- Add inherited members section -->

**Inherited members**

- **From UnsupportedDatasetError**: [class UnsupportedDatasetError[()]{.muted}](#class-unsupporteddataseterror)- **From builtins.BaseException**: with_traceback, add_note

### [class]{.muted} UnsupportedFigureError

<!-- signatures.jinja2 -->

::: {.signature}

<span class="kw">class</span><span class="name">UnsupportedFigureError</span>:

:::

<!-- docstring.jinja2 -->

When an unsupported figure object is constructed.

<!-- Add inherited members section -->

**Inherited members**

- **From UnsupportedFigureError**: [class UnsupportedFigureError[()]{.muted}](#class-unsupportedfigureerror)- **From builtins.BaseException**: with_traceback, add_note
